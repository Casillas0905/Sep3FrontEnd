@page "/Match2"
@using Domain.Models
@using System.Security.Claims
@using HttpClients.ClientInterfaces
@inject IMatchService matchSevice
@inject IUserService userService
@attribute [Authorize]

<h3>Match Details</h3>

@if (matches != null && matches.Any())
{
    <p>Match User1: @matcheUser1</p>
    <p>Match User2: @matcheUser2</p>
    <p>Match: @match</p>

    <button class="btn btn-primary" @onclick="NextMatch">Next Match</button>
}
else
{
    <p>No matches found.</p>
}

@code {
    /*private Task<UserDomainModel> userDomain;
    private string resultMsg = "";
    private string color = "";
    private string note = "";
    private string names = "";
    private string lastname = "";
    private string description = "";
    private string occupation = "";
    private string city = "";
    private Task<IEnumerable<MatchDomainModel>> listOfMatches;
    private int userId;
    private int index = 0;
    private int userToMatch;
  
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
  
    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        bool isLoggedIn = user.Identity != null;

        if (!isLoggedIn) return;

        string username = user.Identity!.Name;
        UserDomainModel currentUser = await userService.findByUsername(username);
        userId = currentUser.Id;

        //await FindUserToMatch(userId);
        ShowUser(currentUser);
    }

    private async Task FindUserToMatch(int id)
    {
        IEnumerable<MatchDomainModel> matches = await matchSevice.findByUserId(id);
        listOfMatches = Task.FromResult(matches);
        if (matches.Any())
        {
            MatchDomainModel match = matches.ElementAt(index);
            int matchingUser = match.userid1 == id ? match.userid2 : match.userid1;
            userToMatch = matchingUser;
        }
        else
        {
            userToMatch = 0; // Set to a default value when no matches are found
        }
    }

    private void ShowUser(UserDomainModel userToShow)
    {
        note = userToShow.Note;
        occupation = userToShow.Occupation;
        names = userToShow.FirstName;
        lastname = userToShow.LastName;
        city = userToShow.City;
        description = userToShow.Description;
    }

    /*private async Task ShowNextUser()
    {
        IEnumerable<MatchDomainModel> matches = await listOfMatches;
        if (matches != null && index < matches.Count() - 1)
        {
            index++;
            MatchDomainModel match = matches.ElementAt(index);
            int matchingUser = match.userid1 == userId ? match.userid2 : match.userid1;
            userToMatch = matchingUser;
            UserDomainModel nextUser = await userService.findById(matchingUser);
            ShowUser(nextUser);
        }
        else
        {
            note = "not user to show";
        }
    }*/
    
    private IEnumerable<MatchDomainModel> matches;
    private int index = 0;
    private int matcheUser1;
    private int matcheUser2;
    private int match;

    protected override async Task OnInitializedAsync()
    {
        //matches = await matchSevice.findByUserId(43); // Replace 123 with the actual user ID
        MatchDomainModel match = await matchSevice.findById(43);
        matcheUser1 = match.userid1;
        matcheUser2 = match.userid2;

    }

    private void NextMatch()
    {
        if (index < matches.Count() - 1)
        {
            index++;
        }
        else
        {
            index = 0;
        }
    }
}
