@page "/Match"
@using HttpClients.ClientInterfaces
@using Domain.Models
@using System.Security.Claims
@inject IMatchService matchSevice
@inject IUserService userService
@attribute [Authorize]

<p>Logged-in User ID: @userId</p>
<p>User to mkatch: @userTomatch</p>
<textarea class="note-text"  @bind="note" placeholder="Note..."></textarea>
  <h3>Me:</h3>
    <textarea  @bind="name" placeholder="What make you interesting?"></textarea>
    <textarea  @bind="lastname" placeholder="What make you interesting?"></textarea>
  <h3>About:</h3>
    <textarea  @bind="occupation" placeholder="Occupation"></textarea>
    <textarea  @bind="city" placeholder="Where do you live"></textarea>
<h3>Description..:</h3>
      <textarea  @bind="description" placeholder="Find something that really like you on a date"></textarea>
<a href="#top">Go up</a>

@code {
  private Task<UserDomainModel> userDomain;
  private string resultMsg = "";
  private string color = "";
  private string note = "";
  private string names = "";
  private string lastname = "";
  private string description = "";
  private string occupation = "";
  private string city = "";
  private Task<IEnumerable<MatchDomainModel>> listOfMatchs;
  private int userId;
  private int index = 0;
  private int userTomatch;
  
  [CascadingParameter]
  public Task<AuthenticationState> AuthState { get; set; } = null!;
  private string? name;
  private IEnumerable<Claim>? userClaims;
  private bool isLoggedIn;

  protected override async Task OnInitializedAsync()
  {
    
    AuthenticationState authState = await AuthState;
    ClaimsPrincipal user1 = authState.User;
    bool isLoggedIn = user1.Identity != null;

    if (!isLoggedIn) return;
    string name = user1.Identity!.Name;
    names = name;
    UserDomainModel users = await userService.findByUsername(names);
    userId = users.Id;
    findUserToMatch(userId);
    //showUser(users);
  }

  private async void findUserToMatch(int id)
  {
    userTomatch = 5;
    IEnumerable<MatchDomainModel> matches = await matchSevice.findByUserId(userId);
    MatchDomainModel match = matches.ElementAt(index);
    int matchingUser = 0;
    userTomatch = 4;
  /*if (match.userid1 == userId)
    {
      matchingUser = match.userid2;
    }
    else
    {
      matchingUser = match.userid1;
    }
    userTomatch = matchingUser;
    UserDomainModel userDomainModel =await userService.findById(matchingUser);
    return userDomainModel ;*/
  }

  private void showUser(UserDomainModel userToShow)
  {
    note = userToShow.Note;
    occupation = userToShow.Occupation;
    names = userToShow.FirstName;
    lastname = userToShow.LastName;
    city = userToShow.City;
    description = userToShow.Description;
  }
}