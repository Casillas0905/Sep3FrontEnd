@page "/ViewOnePost"
@using Domain.Models
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@using System.Security.Claims
@inject IPostService postService;
@inject IUserService userService;
@inject IMessageService messageService;
@attribute [Authorize]

<h3>View Post</h3>
<div class="card">

    @if (!string.IsNullOrEmpty(msg))
    {
        <label style="color: red">@msg</label>
    }
    
    @if (post != null)
    {
        <div class="post-card">
            <h5>@post.Title</h5>
            <label>@post.Messages</label>
            <br/>
        </div>
    }
    
    
</div>

<div class="card">
    <div class="form-group field">
        <label>Message:</label>
        <input type="text" @bind="message"/>
    </div>
    <div class="button-row">
        @if (!string.IsNullOrEmpty(msg))
        {
            <label style="color : @color">@msg</label>
        }
        <button @onclick="AddMessage1" class="acceptbtn">Create</button>
    </div>
</div>

@code {

    //[Parameter]
    public int postId;
    private PostBasicDto postData;
    private string msg = "";
    private Task<IEnumerable<User>>? users;
    private GetPostDto post;
    private string message = "";
    private int messageid;
    private string color = "";
    private AnswerMessage? messages;
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    private string? name;
    private IEnumerable<Claim>? userClaims;
    private bool isLoggedIn;
    
    protected override async Task OnInitializedAsync()
    {
        msg = "";
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        isLoggedIn = user.Identity != null;
        
        if (!isLoggedIn) return;
        
        userClaims = user.Claims;
        name = user.Identity!.Name!;
        users=userService.GetUsers(name);
        try
        {
            int postid = postService.id ;
            postData = await postService.GetPostByIdAsync(postid);
            post = new GetPostDto(postData.Title, postData.Messages);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
    public async Task AddMessage1()
    {
        msg = "";
        
        try
        {
            MessageCreationDto dto = new(message,users.Id,postId);
            await messageService.CreateAsync(dto);
            color = "green";
            msg = "Post created";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }

    }
}